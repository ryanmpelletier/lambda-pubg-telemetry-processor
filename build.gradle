buildscript {
	ext {
		springBootVersion = '2.1.4.RELEASE'
		wrapperVersion = '1.0.21.RELEASE'
		shadowVersion = '4.0.2'
	}
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		//I had issues with https in dev VM in corporate network, you can change to http
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("com.github.jengelman.gradle.plugins:shadow:${shadowVersion}")
		classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:${wrapperVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'

group = 'com.github.ryanp102694'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	//I had issues with https in VM in corporate network, you can change to http
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

ext {
	springCloudFunctionVersion = "2.0.0.BUILD-SNAPSHOT"
	awsLambdaEventsVersion = "2.2.6"
	awsLambdaCoreVersion = "1.2.0"
	jacksonVersion = "2.9.8"
}
ext['reactor.version'] = "3.1.7.RELEASE"

assemble.dependsOn = [shadowJar, thinJar]

jar {
	manifest {
		//both Main-Class and Start-Class have to be specified
		//these point to your @SpringBootApplication annotated class
		attributes 'Main-Class': 'com.github.ryanp102694.Application'
		attributes 'Start-Class': 'com.github.ryanp102694.Application'
	}
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*


shadowJar {
	classifier = 'aws'

	//you can write exclusion rules to save space in the .jar produced since it is limited to 50MB
	dependencies {
		exclude(dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
		exclude(dependency { it.moduleGroup == 'org.apache.tomcat.embed' })
	}


	// Required for Spring
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories']
		mergeStrategy = "append"
	}
}

configurations {
	testCompile.extendsFrom(compileOnly)
}

dependencies {
	compile("org.springframework.cloud:spring-cloud-starter-function-web:${springCloudFunctionVersion}")
	compile("org.springframework.cloud:spring-cloud-function-adapter-aws:${springCloudFunctionVersion}")
	// https://mvnrepository.com/artifact/org.json/json
	compile group: 'org.json', name: 'json', version: '20180813'
	implementation "commons-io:commons-io:2.6"


	//these Jackson dependencies are needed in order to deserialize a ScheduledEvent
	compileOnly("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
	compileOnly("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}")

	// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk
	compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.744'
	// https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-lambda
	compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.744'

	//if you use ScheduledEvent or any lambda events in your code, this has to be compile, otherwise it can be compileOnly
	compileOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
	compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
	testCompile('org.springframework.boot:spring-boot-starter-test')
}